// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  lists         List[]    @relation(name: "ListUsers")
  ratings       Rating[]
  masterOfLists List[]    @relation(name: "MasterUser")
}

model List {
  id        String     @id @default(cuid())
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  master    User       @relation(name: "MasterUser", fields: [masterId], references: [id])
  masterId  String
  users     User[]     @relation(name: "ListUsers")
  listItems ListItem[]

  @@index([masterId], name: "masterId")
}

model ListItem {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  list      List      @relation(fields: [listId], references: [id])
  listId    String
  name      String
  activi    Boolean   @default(false)
  rating    Rating[]
}

model Rating {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  listItem   ListItem  @relation(fields: [listItemId], references: [id])
  listItemId String
  rating     Int
  user       User      @relation(fields: [userId], references: [id])
  userId     String
}
